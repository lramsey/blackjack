// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.App = (function(_super) {
    __extends(App, _super);

    function App() {
      _ref = App.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    App.prototype.initialize = function() {
      var deck;
      this.set('deck', deck = new Deck());
      this.set('playerHand', deck.dealPlayer());
      this.set('dealerHand', deck.dealDealer());
      this.playerCheck21();
      return this.listeners();
    };

    App.prototype.dealerDraw = function() {
      var dealer, dealerScore,
        _this = this;
      console.log(this.get('deck'));
      dealer = this.get('dealerHand');
      dealerScore = parseInt(dealer.scores()) + parseInt(dealer.models[0].attributes.value);
      console.log(dealer);
      console.log(dealerScore);
      if (dealerScore < 17) {
        dealer.drawCard();
        return setTimeout(function() {
          return _this.dealerDraw();
        }, 1000);
      } else {
        dealer.models[0].flip();
        return this.finalCheck21();
      }
    };

    App.prototype.playerCheck21 = function() {
      var allLose, i, length, player, playerScore, _i, _len;
      player = this.get('playerHand');
      playerScore = player.scores();
      console.log(playerScore);
      allLose = [];
      length = playerScore.length;
      for (_i = 0, _len = playerScore.length; _i < _len; _i++) {
        i = playerScore[_i];
        if (i > 21) {
          allLose.push(true);
        } else if (i === 21) {
          this.youWin();
          return void 0;
        } else {
          allLose.push(false);
        }
      }
      console.log(allLose);
      allLose = _.reduce(allLose, function(accu, value) {
        return accu && value;
      });
      if (allLose === true) {
        return this.youLose();
      }
    };

    App.prototype.finalCheck21 = function() {
      var dealer, dealerBust, dealerScore, i, length, player, playerScore, _i, _len;
      player = this.get('playerHand');
      playerScore = player.scores();
      dealer = this.get('dealerHand');
      dealerScore = dealer.scores();
      dealerBust = [];
      length = dealerScore.length;
      for (_i = 0, _len = dealerScore.length; _i < _len; _i++) {
        i = dealerScore[_i];
        if (i > 21) {
          dealerBust.push(true);
        } else {
          dealerBust.push(false);
        }
      }
      console.log(dealerBust);
      dealerBust = _.reduce(dealerBust, function(accu, value) {
        return accu && value;
      });
      if (dealerBust === true || playerScore > dealerScore) {
        return this.youWin();
      } else if (playerScore === dealerScore) {
        return this.tie();
      } else {
        return this.youLose();
      }
    };

    App.prototype.listeners = function() {
      var _this = this;
      this.get('playerHand').on('playerHit', function() {
        _this.playerCheck21();
        return void 0;
      });
      this.get('playerHand').on('dealerHit', function() {
        _this.dealerDraw();
        return void 0;
      });
      return void 0;
    };

    App.prototype.addToDiscard = function() {
      var deck;
      deck = this.attributes.deck;
      _.each(deck.inUse, function(value, key) {
        return deck.discardPile[key] = true;
      });
      deck.inUse = {};
      return window.localStorage.setItem('discardPile', JSON.stringify(deck.discardPile));
    };

    App.prototype.youLose = function() {
      var _this = this;
      return setTimeout(function() {
        $('body').text('You Lose!!!!!!!').append($('<button class="playAgain">Play again</button>'));
        _this.addToDiscard();
        return $('.playAgain').on('click', function() {
          $('body').text('');
          return new AppView({
            model: new App()
          }).$el.appendTo('body');
        });
      }, 1000);
    };

    App.prototype.youWin = function() {
      var _this = this;
      return setTimeout(function() {
        $('body').text('You Win!!!!!!!').append($('<button class="playAgain">Play again</button>'));
        _this.addToDiscard();
        return $('.playAgain').on('click', function() {
          $('body').text('');
          return new AppView({
            model: new App()
          }).$el.appendTo('body');
        });
      }, 1000);
    };

    App.prototype.tie = function() {
      var _this = this;
      return setTimeout(function() {
        $('body').html('Tie...').append($('<button class="playAgain">Play again</button>'));
        _this.addToDiscard();
        return $('.playAgain').on('click', function() {
          $('body').text('');
          return new AppView({
            model: new App()
          }).$el.appendTo('body');
        });
      }, 1000);
    };

    return App;

  })(Backbone.Model);

}).call(this);

/*
//@ sourceMappingURL=App.map
*/
